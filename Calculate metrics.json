{
  "name": "Calculate metrics",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "get-performance",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "b8bb21b1-5929-4c2e-bf64-86569e492b09",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        672,
        272
      ],
      "webhookId": "dpe-performance"
    },
    {
      "parameters": {
        "jsCode": "// Get webhook data\nconst webhookData = $input.first().json;\nconsole.log('Full webhook data:', webhookData);\n\n// Extract entity value with multiple fallbacks\nlet entityValue = 'Mharlee Dela Cruz'; // Default fallback\nlet action = 'getMetrics'; // Default action\n\nif (webhookData.body) {\n  if (webhookData.body.entityValue) {\n    entityValue = webhookData.body.entityValue;\n    console.log('Found entityValue in body:', entityValue);\n  }\n  if (webhookData.body.action) {\n    action = webhookData.body.action;\n    console.log('Found action in body:', action);\n  }\n} else if (webhookData.entityValue) {\n  entityValue = webhookData.entityValue;\n  console.log('Found entityValue at root:', entityValue);\n  if (webhookData.action) {\n    action = webhookData.action;\n    console.log('Found action at root:', action);\n  }\n} else {\n  console.log('No entityValue found, using fallback:', entityValue);\n}\n\n// Build the MongoDB query with the extracted entity\nconst mongoQuery = {\n  \"owner_full_name\": entityValue,\n  \"status\": \"Resolved\"\n};\n\nconsole.log('MongoDB query will be:', mongoQuery);\nconsole.log('Action type:', action);\n\n// Return the query for MongoDB node\nreturn [{\n  json: {\n    query: mongoQuery,\n    entityValue: entityValue,\n    action: action,\n    debug: {\n      webhookStructure: webhookData,\n      extractedEntity: entityValue,\n      extractedAction: action\n    }\n  }\n}];"
      },
      "id": "0e264fa3-e625-4dc3-9695-1f95da156822",
      "name": "Extract Entity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        272
      ]
    },
    {
      "parameters": {
        "collection": "cases",
        "options": {},
        "query": "={{ JSON.stringify($json.query) }}"
      },
      "id": "06e50c09-59d3-47fe-aa34-c3bcb7428b5a",
      "name": "MongoDB Query - Get Cases",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        1024,
        208
      ],
      "credentials": {
        "mongoDb": {
          "id": "tOaY9uUbWbjJyidX",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get webhook payload and action\nconst extractedData = $('Extract Entity').first().json;\nconst action = extractedData.action || 'getMetrics';\nconst entityValue = extractedData.entityValue;\n\n// Get cases from MongoDB find operation\nconst cases = $('MongoDB Query - Get Cases').all();\nconsole.log('MongoDB Find Results:', {\n  casesCount: cases.length,\n  entityValue,\n  action\n});\n\n// If action is getDetails, return all case details\nif (action === 'getDetails') {\n  const detailedCases = cases.map((caseNode, index) => {\n    const caseData = caseNode.json;\n    console.log(`Processing case ${index + 1}:`, {\n      case_id: caseData.case_id,\n      title: caseData.title,\n      status: caseData.status,\n      case_age_days: caseData.case_age_days\n    });\n    \n    return {\n      case_id: caseData.case_id || 'N/A',\n      title: caseData.title || 'No title',\n      status: caseData.status || 'Unknown',\n      priority: caseData.priority || 'N/A',\n      case_age_days: caseData.case_age_days || 0,\n      created_date: caseData.created_date || null,\n      closed_date: caseData.closed_date || null,\n      owner_full_name: caseData.owner_full_name || 'Unknown',\n      products: caseData.products || [],\n      // Exclude structured_email_thread as requested\n    };\n  });\n  \n  console.log('Returning detailed cases:', detailedCases.length);\n  \n  const detailResult = {\n    action: 'getDetails',\n    entityValue,\n    cases: detailedCases,\n    totalCases: detailedCases.length,\n    retrievedAt: new Date().toISOString()\n  };\n  \n  console.log('Detail response:', detailResult);\n  return [{ json: detailResult }];\n}\n\n// Default: Calculate aggregated metrics\nlet totalSct = 0;\nlet validSctCases = 0;\nconst closedCases = cases.length;\n\n// Calculate average SCT from case_age_days\ncases.forEach((caseNode, index) => {\n  const caseData = caseNode.json;\n  if (caseData.case_age_days && typeof caseData.case_age_days === 'number') {\n    totalSct += caseData.case_age_days;\n    validSctCases++;\n    console.log(`Case ${index + 1}: ${caseData.case_id} - ${caseData.case_age_days} days`);\n  }\n});\n\n// Calculate average SCT\nconst avgSct = validSctCases > 0 ? Math.round((totalSct / validSctCases) * 10) / 10 : 0;\n\nconsole.log('Final SCT calculation:', {\n  totalSct,\n  validSctCases,\n  avgSct,\n  closedCases\n});\n\n// Return the aggregated metrics\nconst finalResult = {\n  sct: avgSct,\n  closedCases: closedCases,\n  entityValue,\n  calculatedAt: new Date().toISOString(),\n  debug: {\n    totalCases: cases.length,\n    validSctCases: validSctCases,\n    avgCalculation: `${totalSct} total days / ${validSctCases} valid cases = ${avgSct} avg SCT`\n  }\n};\n\nconsole.log('Calculate Metrics Final Result:', finalResult);\n\nreturn [{ json: finalResult }];"
      },
      "id": "d408d566-328a-4749-90c5-c93bcbc5745b",
      "name": "Calculate Metrics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        272
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "e326fd6e-b6a9-470b-81ec-b91466aa0888",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1632,
        272
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Entity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Entity": {
      "main": [
        [
          {
            "node": "MongoDB Query - Get Cases",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Query - Get Cases": {
      "main": [
        [
          {
            "node": "Calculate Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Metrics": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e7ed8c28-2cb2-4759-bc5c-8a0fa342e6aa",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "91ea575691e96319b81c444c73b27637c88eef71c15d6b90e29f2d14f0fc4b63"
  },
  "id": "klabo62avQEG6HNS",
  "tags": []
}