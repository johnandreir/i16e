{
  "name": "Calculate metrics",
  "nodes": [
    {
      "parameters": {},
      "id": "0f6f3afc-8439-41e6-8cc9-5bfecffffe48",
      "name": "Calculate Metrics Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -464,
        -144
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get input data from the Webhook Trigger - NO FALLBACK DATA\nlet entityValue = null;\nlet action = 'getMetrics';\nlet inputData = {};\n\ntry {\n  console.log('=== CALCULATE METRICS - WEBHOOK INPUT PROCESSING ===');\n  \n  // Get input from the Webhook Trigger node\n  const webhookData = $input.first().json;\n  console.log('Webhook data received:', JSON.stringify(webhookData, null, 2));\n  \n  if (webhookData) {\n    inputData = webhookData;\n    \n    // Extract entity information - NO FALLBACK\n    entityValue = inputData.entityValue || inputData.entityName || \n                 inputData.owner_full_name || inputData.ownerNames?.[0];\n    action = inputData.action || action;\n    \n    console.log('✅ Extracted values from webhook:', { entityValue, action });\n  } else {\n    console.log('⚠️ No data from webhook trigger');\n  }\n  \n} catch (error) {\n  console.error('❌ Error accessing webhook data:', error.message);\n  console.error('❌ Stack trace:', error.stack);\n}\n\nconsole.log('=== FINAL PROCESSING VALUES ===');\nconsole.log('entityValue:', entityValue);\nconsole.log('action:', action);\nconsole.log('hasInputData:', Object.keys(inputData).length > 0);\n\n// FAIL if no entityValue found - DO NOT USE FALLBACK\nif (!entityValue) {\n  console.error('❌ CRITICAL ERROR: No entityValue found in webhook data');\n  console.error('❌ Webhook data structure:', JSON.stringify(inputData, null, 2));\n  throw new Error('CRITICAL: No entityValue found in webhook data - cannot proceed with metrics calculation.');\n}\n\n// Build the MongoDB query\nconst mongoQuery = {\n  \"owner_full_name\": entityValue,\n  \"status\": \"Resolved\"\n};\n\nconsole.log('=== MONGODB QUERY ===');\nconsole.log('Query to execute:', JSON.stringify(mongoQuery, null, 2));\n\n// Return the query for MongoDB node\nconst outputData = {\n  query: mongoQuery,\n  entityValue: entityValue,\n  action: action,\n  debug: {\n    inputData: inputData,\n    extractedEntity: entityValue,\n    extractedAction: action,\n    triggerType: 'webhook',\n    timestamp: new Date().toISOString(),\n    mongoQueryString: JSON.stringify(mongoQuery)\n  }\n};\n\nconsole.log('=== OUTPUT DATA ===');\nconsole.log('Data to pass to MongoDB node:', JSON.stringify(outputData, null, 2));\n\nreturn [{ json: outputData }];"
      },
      "id": "6f1fa3d9-2224-4525-9451-405ad9c0f935",
      "name": "Extract Entity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        -160
      ]
    },
    {
      "parameters": {
        "collection": "cases",
        "options": {},
        "query": "={{ JSON.stringify($json.query) }}"
      },
      "id": "109f81bc-1171-4e78-bf2c-46d8b52285bf",
      "name": "MongoDB Query - Get Cases",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -32,
        -160
      ],
      "credentials": {
        "mongoDb": {
          "id": "Pl29NJOEfuRbqWf6",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get webhook payload and action with error handling\nlet extractedData = {};\nlet action = 'getMetrics';\nlet entityValue = 'Unknown';\n\ntry {\n  console.log('=== CALCULATE METRICS NODE ===');\n  \n  // Safely get data from Extract Entity node\n  const extractNode = $('Extract Entity').first();\n  if (extractNode && extractNode.json) {\n    extractedData = extractNode.json;\n    action = extractedData.action || 'getMetrics';\n    entityValue = extractedData.entityValue || 'Unknown';\n    console.log('✅ Extracted data:', { action, entityValue });\n  } else {\n    console.log('⚠️ No data from Extract Entity node');\n  }\n  \n  // Get cases from MongoDB find operation with error handling\n  let cases = [];\n  try {\n    const mongoResults = $('MongoDB Query - Get Cases').all();\n    cases = mongoResults || [];\n    console.log('✅ MongoDB Find Results:', {\n      casesCount: cases.length,\n      entityValue,\n      action\n    });\n  } catch (mongoError) {\n    console.error('❌ Error getting MongoDB results:', mongoError.message);\n    cases = [];\n  }\n  \n  // If action is getDetails, return all case details\n  if (action === 'getDetails') {\n    const detailedCases = cases.map((caseNode, index) => {\n      try {\n        const caseData = caseNode.json || {};\n        console.log(`Processing case ${index + 1}:`, {\n          case_id: caseData.case_id,\n          title: caseData.title,\n          status: caseData.status,\n          case_age_days: caseData.case_age_days\n        });\n        \n        return {\n          case_id: caseData.case_id || 'N/A',\n          title: caseData.title || 'No title',\n          status: caseData.status || 'Unknown',\n          priority: caseData.priority || 'N/A',\n          case_age_days: caseData.case_age_days || 0,\n          created_date: caseData.created_date || null,\n          closed_date: caseData.closed_date || null,\n          owner_full_name: caseData.owner_full_name || 'Unknown',\n          products: caseData.products || []\n        };\n      } catch (caseError) {\n        console.error(`❌ Error processing case ${index + 1}:`, caseError.message);\n        return {\n          case_id: 'ERROR',\n          title: 'Error processing case',\n          status: 'Error',\n          priority: 'N/A',\n          case_age_days: 0,\n          created_date: null,\n          closed_date: null,\n          owner_full_name: 'Unknown',\n          products: []\n        };\n      }\n    });\n    \n    console.log('Returning detailed cases:', detailedCases.length);\n    \n    const detailResult = {\n      action: 'getDetails',\n      entityValue,\n      cases: detailedCases,\n      totalCases: detailedCases.length,\n      retrievedAt: new Date().toISOString()\n    };\n    \n    console.log('✅ Detail response prepared successfully');\n    return [{ json: detailResult }];\n  }\n  \n  // Default: Calculate aggregated metrics\n  let totalSct = 0;\n  let validSctCases = 0;\n  const closedCases = cases.length;\n  \n  console.log('=== SCT CALCULATION ===');\n  \n  // Calculate average SCT from case_age_days with error handling\n  cases.forEach((caseNode, index) => {\n    try {\n      const caseData = caseNode.json || {};\n      if (caseData.case_age_days && typeof caseData.case_age_days === 'number' && !isNaN(caseData.case_age_days)) {\n        totalSct += caseData.case_age_days;\n        validSctCases++;\n        console.log(`Case ${index + 1}: ${caseData.case_id} - ${caseData.case_age_days} days`);\n      } else {\n        console.log(`Case ${index + 1}: ${caseData.case_id} - Invalid/missing case_age_days: ${caseData.case_age_days}`);\n      }\n    } catch (caseError) {\n      console.error(`❌ Error processing case ${index + 1} for SCT:`, caseError.message);\n    }\n  });\n  \n  // Calculate average SCT with validation\n  const avgSct = validSctCases > 0 ? Math.round((totalSct / validSctCases) * 10) / 10 : 0;\n  \n  console.log('Final SCT calculation:', {\n    totalSct,\n    validSctCases,\n    avgSct,\n    closedCases\n  });\n  \n  // Return the aggregated metrics\n  const finalResult = {\n    sct: avgSct,\n    closedCases: closedCases,\n    entityValue,\n    calculatedAt: new Date().toISOString(),\n    debug: {\n      totalCases: cases.length,\n      validSctCases: validSctCases,\n      avgCalculation: `${totalSct} total days / ${validSctCases} valid cases = ${avgSct} avg SCT`,\n      processingSuccess: true\n    }\n  };\n  \n  console.log('✅ Calculate Metrics Final Result:', JSON.stringify(finalResult, null, 2));\n  \n  return [{ json: finalResult }];\n  \n} catch (error) {\n  console.error('❌ Fatal error in Calculate Metrics node:', error.message);\n  console.error('❌ Stack trace:', error.stack);\n  \n  // Return error result\n  const errorResult = {\n    sct: 0,\n    closedCases: 0,\n    entityValue: entityValue || 'Unknown',\n    calculatedAt: new Date().toISOString(),\n    error: {\n      message: error.message,\n      type: 'Calculate Metrics Error',\n      timestamp: new Date().toISOString()\n    },\n    debug: {\n      totalCases: 0,\n      validSctCases: 0,\n      avgCalculation: 'Error in calculation',\n      processingSuccess: false\n    }\n  };\n  \n  console.log('❌ Returning error result:', JSON.stringify(errorResult, null, 2));\n  return [{ json: errorResult }];\n}"
      },
      "id": "b39ca185-376e-4c28-b47d-4ebf98d9f92d",
      "name": "Calculate Metrics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        -160
      ]
    },
    {
      "parameters": {},
      "id": "e62dc041-b4c9-4c4c-a2e9-6c678f95e244",
      "name": "Done",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        416,
        -160
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Extract Entity": {
      "main": [
        [
          {
            "node": "MongoDB Query - Get Cases",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Query - Get Cases": {
      "main": [
        [
          {
            "node": "Calculate Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Metrics": {
      "main": [
        [
          {
            "node": "Done",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Metrics Trigger": {
      "main": [
        [
          {
            "node": "Extract Entity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "75022119-e6ff-4750-878a-1b41818f754b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4ae47e0d2927c2ad6ce432ba64a316fc4b36f12b6aeb96b5fb893ad9ad8e6961"
  },
  "id": "VaX3w979KjLLcgNY",
  "tags": []
}