{
  "name": "Calculate metrics",
  "nodes": [
    {
      "parameters": {},
      "id": "0f6f3afc-8439-41e6-8cc9-5bfecffffe48",
      "name": "Calculate Metrics Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -464,
        -144
      ]
    },
    {
      "parameters": {
        "operation": "delete",
        "collection": "performance_data",
        "options": {}
      },
      "id": "d1e2f3g4-h5i6-j7k8-l9m0-n1o2p3q4r5s6",
      "name": "MongoDB Delete - Clear All Performance Data",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -360,
        -160
      ],
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "Pl29NJOEfuRbqWf6",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract entity data from Execute Workflow trigger - Multiple access methods\nlet entityValue = null;\nlet action = 'getMetrics';\nlet inputData = {};\nlet dataSource = 'unknown';\n\ntry {\n  console.log('=== EXTRACT ENTITY - MULTIPLE DATA ACCESS METHODS ===');\n  \n  // METHOD 1: Try to get data from $input (from MongoDB Delete operation)\n  let method1Data = null;\n  try {\n    method1Data = $input.first().json;\n    console.log('Method 1 - $input.first().json:', JSON.stringify(method1Data, null, 2));\n    if (method1Data && (method1Data.entityValue || method1Data.owner_full_name)) {\n      inputData = method1Data;\n      dataSource = 'input-first';\n      console.log('✅ Method 1 successful - using $input data');\n    }\n  } catch (method1Error) {\n    console.log('⚠️ Method 1 failed:', method1Error.message);\n  }\n  \n  // METHOD 2: Try to access the trigger node directly\n  if (!inputData.entityValue && !inputData.owner_full_name) {\n    try {\n      const triggerNode = $('Calculate Metrics Trigger').first();\n      if (triggerNode && triggerNode.json) {\n        const method2Data = triggerNode.json;\n        console.log('Method 2 - Direct trigger access:', JSON.stringify(method2Data, null, 2));\n        if (method2Data && (method2Data.entityValue || method2Data.owner_full_name)) {\n          inputData = method2Data;\n          dataSource = 'trigger-direct';\n          console.log('✅ Method 2 successful - using trigger data');\n        }\n      }\n    } catch (method2Error) {\n      console.log('⚠️ Method 2 failed:', method2Error.message);\n    }\n  }\n  \n  // METHOD 3: Try to access MongoDB Delete node output\n  if (!inputData.entityValue && !inputData.owner_full_name) {\n    try {\n      const deleteNode = $('MongoDB Delete - Clear All Performance Data').first();\n      if (deleteNode && deleteNode.json) {\n        const method3Data = deleteNode.json;\n        console.log('Method 3 - MongoDB Delete output:', JSON.stringify(method3Data, null, 2));\n        if (method3Data && (method3Data.entityValue || method3Data.owner_full_name)) {\n          inputData = method3Data;\n          dataSource = 'delete-output';\n          console.log('✅ Method 3 successful - using delete output');\n        }\n      }\n    } catch (method3Error) {\n      console.log('⚠️ Method 3 failed:', method3Error.message);\n    }\n  }\n  \n  // METHOD 4: Check all available inputs\n  if (!inputData.entityValue && !inputData.owner_full_name) {\n    try {\n      const allInputs = $input.all();\n      console.log('Method 4 - All inputs count:', allInputs.length);\n      for (let i = 0; i < allInputs.length; i++) {\n        const inputItem = allInputs[i];\n        console.log(`Input ${i}:`, JSON.stringify(inputItem.json, null, 2));\n        if (inputItem.json && (inputItem.json.entityValue || inputItem.json.owner_full_name)) {\n          inputData = inputItem.json;\n          dataSource = `input-${i}`;\n          console.log(`✅ Method 4 successful - using input ${i}`);\n          break;\n        }\n      }\n    } catch (method4Error) {\n      console.log('⚠️ Method 4 failed:', method4Error.message);\n    }\n  }\n  \n  // Extract entity value from whatever data we found\n  if (inputData && typeof inputData === 'object') {\n    entityValue = inputData.entityValue || \n                 inputData.owner_full_name || \n                 inputData.entityName;\n    action = inputData.action || 'getMetrics';\n    \n    console.log('✅ Entity extraction successful:', {\n      entityValue,\n      action,\n      dataSource,\n      hasSource: !!inputData.source,\n      hasTimestamp: !!inputData.timestamp\n    });\n  }\n  \n} catch (error) {\n  console.error('❌ Fatal error in data extraction:', error.message);\n  console.error('❌ Stack trace:', error.stack);\n}\n\nconsole.log('=== FINAL EXTRACTION RESULTS ===');\nconsole.log('entityValue:', entityValue);\nconsole.log('action:', action);\nconsole.log('dataSource:', dataSource);\nconsole.log('inputData available:', !!inputData);\nconsole.log('inputData keys:', inputData ? Object.keys(inputData) : 'none');\n\n// CRITICAL: Fail if no entityValue found\nif (!entityValue) {\n  console.error('❌ CRITICAL ERROR: No entityValue found using any access method');\n  console.error('❌ Data source attempted:', dataSource);\n  console.error('❌ Input data structure:', JSON.stringify(inputData, null, 2));\n  \n  // Provide detailed error information\n  const errorDetails = {\n    error: 'No entityValue found',\n    dataSource: dataSource,\n    inputDataKeys: inputData ? Object.keys(inputData) : [],\n    inputDataSample: inputData,\n    timestamp: new Date().toISOString()\n  };\n  \n  throw new Error(`CRITICAL: No entityValue found in Execute Workflow trigger data. Attempted source: ${dataSource}. Details: ${JSON.stringify(errorDetails)}`);\n}\n\n// Build MongoDB query\nconst mongoQuery = {\n  \"owner_full_name\": entityValue,\n  \"status\": \"Resolved\"\n};\n\nconsole.log('=== MONGODB QUERY BUILT ===');\nconsole.log('Query:', JSON.stringify(mongoQuery, null, 2));\n\n// Prepare output\nconst outputData = {\n  query: mongoQuery,\n  entityValue: entityValue,\n  action: action,\n  debug: {\n    dataSource: dataSource,\n    extractedEntity: entityValue,\n    extractedAction: action,\n    triggerType: 'executeWorkflow',\n    processedAt: new Date().toISOString(),\n    mongoQueryString: JSON.stringify(mongoQuery),\n    inputDataKeys: inputData ? Object.keys(inputData) : [],\n    extractionSuccess: true\n  }\n};\n\nconsole.log('=== EXTRACT ENTITY COMPLETE ===');\nconsole.log('Output data:', JSON.stringify(outputData, null, 2));\n\nreturn [{ json: outputData }];"
      },
      "id": "6f1fa3d9-2224-4525-9451-405ad9c0f935",
      "name": "Extract Entity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -256,
        -160
      ]
    },
    {
      "parameters": {
        "operation": "find",
        "collection": "cases",
        "options": {},
        "query": "={{ JSON.stringify($json.query) }}"
      },
      "id": "109f81bc-1171-4e78-bf2c-46d8b52285bf",
      "name": "MongoDB Query - Get Cases",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        -32,
        -160
      ],
      "credentials": {
        "mongoDb": {
          "id": "Pl29NJOEfuRbqWf6",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get webhook payload and action with error handling\nlet extractedData = {};\nlet action = 'getMetrics';\nlet entityValue = 'Unknown';\n\ntry {\n  console.log('=== CALCULATE METRICS NODE ===');\n  \n  // Safely get data from Extract Entity node\n  const extractNode = $('Extract Entity').first();\n  if (extractNode && extractNode.json) {\n    extractedData = extractNode.json;\n    action = extractedData.action || 'getMetrics';\n    entityValue = extractedData.entityValue || 'Unknown';\n    console.log('✅ Extracted data:', { action, entityValue });\n  } else {\n    console.log('⚠️ No data from Extract Entity node');\n  }\n  \n  // Get cases from MongoDB find operation with error handling\n  let cases = [];\n  try {\n    const mongoResults = $('MongoDB Query - Get Cases').all();\n    cases = mongoResults || [];\n    console.log('✅ MongoDB Find Results:', {\n      casesCount: cases.length,\n      entityValue,\n      action\n    });\n  } catch (mongoError) {\n    console.error('❌ Error getting MongoDB results:', mongoError.message);\n    cases = [];\n  }\n  \n  // If action is getDetails, return all case details\n  if (action === 'getDetails') {\n    const detailedCases = cases.map((caseNode, index) => {\n      try {\n        const caseData = caseNode.json || {};\n        console.log(`Processing case ${index + 1}:`, {\n          case_id: caseData.case_id,\n          title: caseData.title,\n          status: caseData.status,\n          case_age_days: caseData.case_age_days\n        });\n        \n        return {\n          case_id: caseData.case_id || 'N/A',\n          title: caseData.title || 'No title',\n          status: caseData.status || 'Unknown',\n          priority: caseData.priority || 'N/A',\n          case_age_days: caseData.case_age_days || 0,\n          created_date: caseData.created_date || null,\n          closed_date: caseData.closed_date || null,\n          owner_full_name: caseData.owner_full_name || 'Unknown',\n          products: caseData.products || []\n        };\n      } catch (caseError) {\n        console.error(`❌ Error processing case ${index + 1}:`, caseError.message);\n        return {\n          case_id: 'ERROR',\n          title: 'Error processing case',\n          status: 'Error',\n          priority: 'N/A',\n          case_age_days: 0,\n          created_date: null,\n          closed_date: null,\n          owner_full_name: 'Unknown',\n          products: []\n        };\n      }\n    });\n    \n    console.log('Returning detailed cases:', detailedCases.length);\n    \n    const detailResult = {\n      action: 'getDetails',\n      entityValue,\n      cases: detailedCases,\n      totalCases: detailedCases.length,\n      retrievedAt: new Date().toISOString()\n    };\n    \n    console.log('✅ Detail response prepared successfully');\n    return [{ json: detailResult }];\n  }\n  \n  // Default: Calculate aggregated metrics\n  let totalSct = 0;\n  let validSctCases = 0;\n  const closedCases = cases.length;\n  \n  console.log('=== SCT CALCULATION ===');\n  \n  // Calculate average SCT from case_age_days with error handling\n  cases.forEach((caseNode, index) => {\n    try {\n      const caseData = caseNode.json || {};\n      if (caseData.case_age_days && typeof caseData.case_age_days === 'number' && !isNaN(caseData.case_age_days)) {\n        totalSct += caseData.case_age_days;\n        validSctCases++;\n        console.log(`Case ${index + 1}: ${caseData.case_id} - ${caseData.case_age_days} days`);\n      } else {\n        console.log(`Case ${index + 1}: ${caseData.case_id} - Invalid/missing case_age_days: ${caseData.case_age_days}`);\n      }\n    } catch (caseError) {\n      console.error(`❌ Error processing case ${index + 1} for SCT:`, caseError.message);\n    }\n  });\n  \n  // Calculate average SCT with validation\n  const avgSct = validSctCases > 0 ? Math.round((totalSct / validSctCases) * 10) / 10 : 0;\n  \n  console.log('Final SCT calculation:', {\n    totalSct,\n    validSctCases,\n    avgSct,\n    closedCases\n  });\n  \n  // Return the aggregated metrics\n  const finalResult = {\n    sct: avgSct,\n    closedCases: closedCases,\n    entityValue,\n    calculatedAt: new Date().toISOString(),\n    debug: {\n      totalCases: cases.length,\n      validSctCases: validSctCases,\n      avgCalculation: `${totalSct} total days / ${validSctCases} valid cases = ${avgSct} avg SCT`,\n      processingSuccess: true\n    }\n  };\n  \n  console.log('✅ Calculate Metrics Final Result:', JSON.stringify(finalResult, null, 2));\n  \n  return [{ json: finalResult }];\n  \n} catch (error) {\n  console.error('❌ Fatal error in Calculate Metrics node:', error.message);\n  console.error('❌ Stack trace:', error.stack);\n  \n  // Return error result\n  const errorResult = {\n    sct: 0,\n    closedCases: 0,\n    entityValue: entityValue || 'Unknown',\n    calculatedAt: new Date().toISOString(),\n    error: {\n      message: error.message,\n      type: 'Calculate Metrics Error',\n      timestamp: new Date().toISOString()\n    },\n    debug: {\n      totalCases: 0,\n      validSctCases: 0,\n      avgCalculation: 'Error in calculation',\n      processingSuccess: false\n    }\n  };\n  \n  console.log('❌ Returning error result:', JSON.stringify(errorResult, null, 2));\n  return [{ json: errorResult }];\n}"
      },
      "id": "b39ca185-376e-4c28-b47d-4ebf98d9f92d",
      "name": "Calculate Metrics",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        -160
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare entity lookup - ensure entityValue is properly passed\nlet entityValue = null;\nlet metricsData = {};\n\ntry {\n  console.log('=== PREPARE ENTITY LOOKUP ===');\n  \n  // Get the calculated metrics from previous node\n  const calculatedMetrics = $input.first().json;\n  console.log('Input from Calculate Metrics:', JSON.stringify(calculatedMetrics, null, 2));\n  \n  if (calculatedMetrics) {\n    metricsData = calculatedMetrics;\n    entityValue = calculatedMetrics.entityValue;\n    \n    console.log('✅ Entity value extracted for lookup:', entityValue);\n  } else {\n    console.log('⚠️ No input data from Calculate Metrics node');\n  }\n  \n} catch (error) {\n  console.error('❌ Error preparing entity lookup:', error.message);\n}\n\nif (!entityValue) {\n  console.error('❌ CRITICAL: No entityValue available for DPE lookup');\n  throw new Error('No entityValue available for DPE lookup');\n}\n\n// Pass through the metrics data and add the entityValue for the lookup\nconst outputData = {\n  ...metricsData,\n  entityValue: entityValue,\n  entityLookupQuery: {name: entityValue},\n  debug: {\n    ...metricsData.debug,\n    entityLookupPrepared: true,\n    entityValueForLookup: entityValue\n  }\n};\n\nconsole.log('=== ENTITY LOOKUP PREPARED ===');\nconsole.log('Entity value for DPE lookup:', entityValue);\nconsole.log('Query to execute:', JSON.stringify({name: entityValue}, null, 2));\n\nreturn [{ json: outputData }];"
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-g34567890123",
      "name": "Prepare Entity Lookup",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        248,
        -160
      ]
    },
    {
      "parameters": {
        "operation": "find",
        "collection": "dpe",
        "options": {},
        "query": "={{ JSON.stringify({name: $json.entityValue || 'Unknown'}) }}"
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "MongoDB Find - Get Entity ID",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        360,
        -160
      ],
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "Pl29NJOEfuRbqWf6",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare simplified data for MongoDB Insert - performance_data collection\nlet entityId = null;\nlet entityType = 'dpe';\nlet entityName = 'Unknown';\nlet metricsData = {};\nlet casesData = [];\n\ntry {\n  console.log('=== PREPARE DATABASE SAVE (SIMPLIFIED) ===');\n  \n  // Get calculated metrics from Calculate Metrics node\n  const calculatedMetrics = $('Calculate Metrics').first();\n  if (calculatedMetrics && calculatedMetrics.json) {\n    metricsData = calculatedMetrics.json;\n    entityName = metricsData.entityValue || 'Unknown';\n    console.log('✅ Got calculated metrics:', { \n      sct: metricsData.sct, \n      closedCases: metricsData.closedCases,\n      entityValue: entityName \n    });\n  }\n  \n  // Get entity information from MongoDB Find (optional)\n  const entityResults = $('MongoDB Find - Get Entity ID').all();\n  if (entityResults && entityResults.length > 0 && entityResults[0].json && entityResults[0].json._id) {\n    const entityData = entityResults[0].json;\n    entityId = entityData._id;\n    entityName = entityData.name || entityName;\n    console.log('✅ Found entity in DPE collection:', { entityId, entityName });\n  } else {\n    console.log('⚠️ Entity not found in DPE collection, proceeding without entity_id');\n  }\n  \n  // Get detailed cases from MongoDB Query - Get Cases\n  const casesResults = $('MongoDB Query - Get Cases').all();\n  if (casesResults && casesResults.length > 0) {\n    casesData = casesResults.map(caseNode => {\n      const caseData = caseNode.json || {};\n      return {\n        case_id: caseData.case_id || null,\n        title: caseData.title || null,\n        status: caseData.status || null,\n        case_age_days: Number(caseData.case_age_days) || 0,\n        owner_full_name: caseData.owner_full_name || null,\n        created_date: caseData.created_date || null,\n        closed_date: caseData.closed_date || null\n      };\n    });\n    console.log('✅ Processed cases data:', casesData.length, 'cases');\n  }\n  \n  // Create simplified performance record with proper data types\n  const performanceRecord = {\n    entity_name: String(entityName),\n    entity_type: String(entityType),\n    date: new Date().toISOString().split('T')[0], // YYYY-MM-DD format\n    metrics: {\n      sct: Number(metricsData.sct) || 0,\n      closedCases: Number(metricsData.closedCases) || 0,\n      satisfaction: 85\n    },\n    created_at: new Date(),\n    updated_at: new Date()\n  };\n  \n  // Add entity_id only if we have a valid ObjectId\n  if (entityId && typeof entityId === 'string' && entityId.length === 24) {\n    performanceRecord.entity_id = entityId;\n  }\n  \n  // Add cases data if available (but keep it simple)\n  if (casesData.length > 0) {\n    performanceRecord.cases_count = casesData.length;\n    performanceRecord.sample_cases = casesData.slice(0, 5); // Limit to first 5 cases\n  }\n  \n  console.log('✅ Simplified performance record prepared:', {\n    entity_name: performanceRecord.entity_name,\n    entity_type: performanceRecord.entity_type,\n    date: performanceRecord.date,\n    has_entity_id: !!performanceRecord.entity_id,\n    sct: performanceRecord.metrics.sct,\n    closedCases: performanceRecord.metrics.closedCases,\n    cases_count: performanceRecord.cases_count || 0\n  });\n  \n  return [{ json: performanceRecord }];\n  \n} catch (error) {\n  console.error('❌ Error preparing database save:', error.message);\n  console.error('❌ Stack trace:', error.stack);\n  \n  // Return minimal valid record on error\n  const errorRecord = {\n    entity_name: String(entityName || 'Error'),\n    entity_type: 'dpe',\n    date: new Date().toISOString().split('T')[0],\n    metrics: {\n      sct: 0,\n      closedCases: 0,\n      satisfaction: 0\n    },\n    created_at: new Date(),\n    updated_at: new Date(),\n    error: {\n      message: error.message,\n      timestamp: new Date()\n    }\n  };\n  \n  console.log('❌ Returning minimal error record for database save');\n  return [{ json: errorRecord }];\n}"
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Prepare Database Save",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        584,
        -160
      ]
    },
    {
      "parameters": {
        "operation": "insert",
        "collection": "performance_data",
        "fields": "={{ Object.keys($json).join(',') }}",
        "options": {}
      },
      "id": "f1a2b3c4-d5e6-f7g8-h9i0-j1k2l3m4n5o6",
      "name": "MongoDB Insert - Save Metrics",
      "type": "n8n-nodes-base.mongoDb",
      "typeVersion": 1.2,
      "position": [
        808,
        -160
      ],
      "alwaysOutputData": true,
      "credentials": {
        "mongoDb": {
          "id": "Pl29NJOEfuRbqWf6",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {},
      "id": "e62dc041-b4c9-4c4c-a2e9-6c678f95e244",
      "name": "Done",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1000,
        -160
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "MongoDB Delete - Clear All Performance Data": {
      "main": [
        [
          {
            "node": "Extract Entity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Entity": {
      "main": [
        [
          {
            "node": "MongoDB Query - Get Cases",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Query - Get Cases": {
      "main": [
        [
          {
            "node": "Calculate Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Metrics": {
      "main": [
        [
          {
            "node": "Prepare Entity Lookup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Entity Lookup": {
      "main": [
        [
          {
            "node": "MongoDB Find - Get Entity ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Find - Get Entity ID": {
      "main": [
        [
          {
            "node": "Prepare Database Save",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Database Save": {
      "main": [
        [
          {
            "node": "MongoDB Insert - Save Metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Insert - Save Metrics": {
      "main": [
        [
          {
            "node": "Done",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Metrics Trigger": {
      "main": [
        [
          {
            "node": "MongoDB Delete - Clear All Performance Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "75022119-e6ff-4750-878a-1b41818f754b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4ae47e0d2927c2ad6ce432ba64a316fc4b36f12b6aeb96b5fb893ad9ad8e6961"
  },
  "id": "VaX3w979KjLLcgNY",
  "tags": []
}