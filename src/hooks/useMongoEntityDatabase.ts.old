import { useState, useEffect } from 'react';
import { mongoEntityService, EntityData, EntityMappings, DashboardData } from '@/lib/mongoEntityService';

export const useMongoEntityDatabase = () => {
  const [entityService] = useState(() => mongoEntityService);
  const [entityData, setEntityData] = useState<EntityData>({
    teams: ['Add New Team...'],
    squads: ['Add New Squad...'],
    dpes: ['Add New DPE...']
  });
  const [entityMappings, setEntityMappings] = useState<EntityMappings>({
    dpeToSquad: {},
    squadToTeam: {}
  });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const initializeAndLoad = async () => {
      try {
        setIsLoading(true);
        setError(null);
        
        const data = await entityService.getEntityData();
        const mappings = await entityService.getEntityMappings();
        
        setEntityData(data);
        setEntityMappings(mappings);
        console.log('✅ Successfully loaded entity data from MongoDB');
      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Failed to connect to MongoDB';
        setError(`MongoDB Connection Error: ${errorMessage}`);
        console.error('❌ Failed to load entity data:', err);
        
        // Reset entity data to show no data available instead of fallback data
        setEntityData({
          teams: [],
          squads: [],
          dpes: []
        });
        setEntityMappings({
          dpeToSquad: {},
          squadToTeam: {}
        });
      } finally {
        setIsLoading(false);
      }
    };

    initializeAndLoad();
  }, []);

  const loadEntityData = async () => {
    try {
      setError(null);
      const data = await entityService.getEntityData();
      const mappings = await entityService.getEntityMappings();
      setEntityData(data);
      setEntityMappings(mappings);
      console.log('✅ Successfully reloaded entity data from MongoDB');
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to connect to MongoDB';
      setError(`MongoDB Connection Error: ${errorMessage}`);
      console.error('❌ Failed to reload entity data:', err);
      
      // Reset entity data on error
      setEntityData({
        teams: [],
        squads: [],
        dpes: []
      });
      setEntityMappings({
        dpeToSquad: {},
        squadToTeam: {}
      });
    }
  };

  // Team operations
  const createTeam = async (name: string, description?: string) => {
    try {
      setError(null);
      const result = await entityService.createTeam();
      if (result) {
        await loadEntityData();
        return true;
      }
      return false;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create team');
      return false;
    }
  };

  const updateTeam = async (oldName: string, newName: string, description?: string) => {
    try {
      setError(null);
      const success = await entityService.updateTeam();
      if (success) {
        await loadEntityData();
      }
      return success;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update team');
      return false;
    }
  };

  const deleteTeam = async (name: string) => {
    try {
      setError(null);
      const success = await entityService.deleteTeam();
      if (success) {
        await loadEntityData();
      }
      return success;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete team');
      return false;
    }
  };

  // Squad operations
  const createSquad = async (name: string, teamName: string, description?: string) => {
    try {
      setError(null);
      const result = await entityService.createSquad();
      if (result) {
        await loadEntityData();
        return true;
      }
      return false;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create squad');
      return false;
    }
  };

  const updateSquad = async (oldName: string, newName: string, teamName: string, description?: string) => {
    try {
      setError(null);
      const success = await entityService.updateSquad();
      if (success) {
        await loadEntityData();
      }
      return success;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update squad');
      return false;
    }
  };

  const deleteSquad = async (name: string) => {
    try {
      setError(null);
      const success = await entityService.deleteSquad();
      if (success) {
        await loadEntityData();
      }
      return success;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete squad');
      return false;
    }
  };

  // DPE operations
  const createDPE = async (name: string, squadName: string, email?: string) => {
    try {
      setError(null);
      const result = await entityService.createDPE();
      if (result) {
        await loadEntityData();
        return true;
      }
      return false;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create DPE');
      return false;
    }
  };

  const updateDPE = async (oldName: string, newName: string, squadName: string, email?: string) => {
    try {
      setError(null);
      const success = await entityService.updateDPE();
      if (success) {
        await loadEntityData();
      }
      return success;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to update DPE');
      return false;
    }
  };

  const deleteDPE = async (name: string) => {
    try {
      setError(null);
      const success = await entityService.deleteDPE();
      if (success) {
        await loadEntityData();
      }
      return success;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete DPE');
      return false;
    }
  };

  // Dashboard operations
  const getDashboardData = async (entityType: string, entityValue: string): Promise<DashboardData | null> => {
    try {
      setError(null);
      return await entityService.getDashboardData();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to get dashboard data');
      return null;
    }
  };

  // Performance operations
  const addPerformanceMetrics = async (
    dpeName: string, 
    sct: number, 
    cases: number, 
    satisfaction: number, 
    periodStart: string, 
    periodEnd: string
  ) => {
    try {
      setError(null);
      const success = await entityService.addPerformanceMetrics();
      return success;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to add performance metrics');
      return false;
    }
  };

  const getPerformanceHistory = async (dpeName: string, days: number = 30) => {
    try {
      setError(null);
      return await entityService.getPerformanceHistory();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to get performance history');
      return [];
    }
  };

  // Migration placeholder (not needed for MongoDB)
  const migrateLegacyData = async () => {
    try {
      setError(null);
      console.log('Migration not needed for MongoDB implementation');
      return true;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Migration failed');
      return false;
    }
  };

  const regenerateSampleData = async () => {
    try {
      setError(null);
      await entityService.regenerateSampleData();
      await loadEntityData();
      return true;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to regenerate sample data');
      return false;
    }
  };

  const clearAllData = async () => {
    try {
      setError(null);
      await entityService.clearAllData();
      await loadEntityData();
      return true;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to clear all data');
      return false;
    }
  };

  return {
    // Data
    entityData,
    entityMappings,
    isLoading,
    error,
    
    // Operations
    refreshData: loadEntityData,
    
    // Team operations
    createTeam,
    updateTeam,
    deleteTeam,
    
    // Squad operations
    createSquad,
    updateSquad,
    deleteSquad,
    
    // DPE operations
    createDPE,
    updateDPE,
    deleteDPE,
    
    // Dashboard operations
    getDashboardData,
    
    // Performance operations
    addPerformanceMetrics,
    getPerformanceHistory,
    
    // Migration and sample data
    migrateLegacyData,
    regenerateSampleData,
    clearAllData,
    
    // Debug and utilities
    debugDatabaseContents: () => entityService.debugDatabaseContents(),
    
    // Get entities with database IDs for management
    getTeamsWithIds: () => entityService.getTeamsWithIds(),
    getSquadsWithIds: () => entityService.getSquadsWithIds(),
    getDPEsWithIds: () => entityService.getDPEsWithIds()
  };
};

export default useMongoEntityDatabase;