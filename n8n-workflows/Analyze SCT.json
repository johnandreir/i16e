{
  "name": "Analyze SCT",
  "nodes": [
    {
      "parameters": {
        "content": "## Email Scrubber (High SCT)",
        "height": 432,
        "width": 624,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -752,
        112
      ],
      "typeVersion": 1,
      "id": "06930a23-3b80-4e9f-825c-f9776c3c760d",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "jsCode": "  // Get the AI output\n  const aiResponse = $input.first().json.output;\n\n  // Parse the JSON string\n  let parsedOutput;\n  try {\n    parsedOutput = JSON.parse(aiResponse);\n  } catch (error) {\n    // If parsing fails, return error info\n    return [{ json: { error: \"Failed to parse JSON\", raw_output: aiResponse } }];\n  }\n\n  // Return the parsed JSON\n  return [{ json: parsedOutput }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -96,
        176
      ],
      "id": "b68572fe-d1be-44e1-8d42-39e4e7d24e88",
      "name": "JSONizer"
    },
    {
      "parameters": {
        "operation": "aggregate",
        "collection": "cases",
        "query": "=  [\n    {\n      \"$match\": {\n        \"status\": \"Resolved\"\n      }\n    },\n    {\n      \"$sort\": {\n        \"case_age_days\": -1\n      }\n    },\n    {\n      \"$limit\": 5\n    },\n    {\n      \"$project\": {\n        \"case_id\": 1,\n        \"priority\": 1,\n        \"owner_full_name\": 1,\n        \"title\": 1,\n        \"products\": 1,\n        \"created_date\": 1,\n        \"closed_date\": 1,\n        \"case_age_days\": 1,\n        \"structured_email_thread\": 1\n      }\n    }\n  ]"
      },
      "type": "n8n-nodes-base.mongoDbTool",
      "typeVersion": 1.2,
      "position": [
        -352,
        400
      ],
      "id": "bb33fd63-a43f-4172-85e3-72b7a8e457ef",
      "name": "emailDB",
      "credentials": {
        "mongoDb": {
          "id": "uCCYnpccbmAfY9W9",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -608,
        400
      ],
      "id": "b2bbd88d-b4a7-4482-9862-18a60d72032c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "sNYSwlaVIlldj1f2",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "sentiment",
        "databaseName": "i16e-db"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryMongoDbChat",
      "typeVersion": 1,
      "position": [
        -480,
        400
      ],
      "id": "37414973-e296-4411-ae9a-19de0f97df89",
      "name": "MongoDB Chat Memory",
      "credentials": {
        "mongoDb": {
          "id": "uCCYnpccbmAfY9W9",
          "name": "MongoDB account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "# Customer Support Quality Analysis\n\n## Tools & Data Sources\n- **emailDB**: Analyze P1 priority cases with high SCT (case email exchanges and timing data)\n\n## Your Role\nYou are a customer support quality analyst providing feedback for team leads conducting 1-on-1 engineer coaching sessions. Focus exclusively on engineer performance, communication skills, and case handling processes. **Do not suggest product improvements.**\n\n## Key Requirements\n- **No names**: Generalize all analysis without identifying specific individuals\n- **Evidence-based**: Reference specific case IDs when citing examples (use complete case IDs as they appear in database)\n- **Actionable**: Provide coaching recommendations suitable for manager-engineer discussions\n- **Complete Data**: Always use full case IDs and exact field values - never truncate or abbreviate\n\n## Email Timeline Analysis\n- **Calculate response times**: Analyze timestamps within `structured_email_thread` to calculate time spans between customer and engineer exchanges\n- **Date format**: Email timestamps are in format `2025-06-27T09:06:54Z`\n- **Response delay baseline**: If time span is more than 3 days and response is pending from engineer, use this as a key factor for coaching recommendations\n- **Timeline patterns**: Identify patterns of delayed responses, quick turnarounds, or communication gaps\n- **Timeline accuracy**: Carefully verify timeline calculations by examining the actual sequence of emails and their timestamps. Only count days when engineer response is actually pending, not total case duration.\n\n**Timeline Calculation Example**:\n- Customer email: 2025-06-26T10:00:00Z\n- Engineer response: 2025-06-29T14:00:00Z\n- Calculation: 3 days, 4 hours (engineer response delay)\n\n## Analysis Areas\n\n### Email-Based Sentiment Analysis (from emailDB)\nExamine the `structured_email_thread` field for each case to analyze email tone, customer satisfaction indicators, and communication effectiveness in P1 priority cases. Review the complete email exchange between engineer and customer to identify patterns where engineer responses may have improved or worsened customer sentiment. **Provide 2-3 specific coaching recommendations per case analyzed.**\n\n### Case Hand-Off & Timing Analysis\nReview email timestamps and case progression to identify delays, inefficient handovers, or missed response opportunities. Focus on process improvements and time management.\n\n### Summary\nConsolidate findings into manager-ready coaching points, including both improvement areas and engineer strengths observed.\n\n## Sample Coaching Recommendations\nUse these as examples, but you are not limited to these recommendations. Create specific, actionable coaching points based on your analysis:\n\n**Delay Management:**\n- For excessive delays: Engage in remote session to help the customer with the prepared action plan\n- For urgent issues requiring customer updates: Initiate a callback to the customer\n\n**Escalation & Investigation:**\n- When cases are escalated to RD Team and require extended investigation time: Manage customer expectations and prioritize relaying timely updates to the customer\n- When engineers struggle with issue investigation: Suggest utilizing available resources like CompanionXL, Eureka Search, or reaching out to Squad Leads for additional insights and help\n\n**Note:** Tailor your recommendations to the specific situation and create additional coaching points as needed based on your analysis of each case.\n\n## IMPORTANT: Output Format\nYou MUST respond with valid JSON only. No markdown formatting. Use this exact structure:\n\n```json\n{\n  \"email_sentiment_analysis\": [\n    {\n      \"problem\": \"Extended case duration leading to customer frustration due to complex issues...\",\n      \"case_id\": \"TM-XXXXXXX\",\n      \"recommendations\": [\n        \"Coach on maintaining clear and concise communications...\",\n        \"Improve proactive status updates during complex investigations...\",\n        \"Develop better expectation management techniques...\"\n      ]\n    }\n  ],\n  \"case_handoffs_and_delays\": [\n    {\n      \"problem\": \"Prolonged case duration due to dependency on multiple internal teams...\",\n      \"case_id\": \"TM-XXXXXXX\",\n      \"recommendations\": [\n        \"Emphasize the need for tighter case management...\",\n        \"Improve internal team coordination and escalation protocols...\",\n        \"Implement regular status check-ins with customer during delays...\"\n      ]\n    }\n  ],\n  \"summary\": {\n    \"areas_for_improvement\": [\n      \"Enhance customer communications by translating technical jargon\",\n      \"Improve proactive engagement during long or complex cases\"\n    ],\n    \"strengths\": [\n      \"Demonstrated perseverance and persistence in complex cases\",\n      \"Maintained professional and polite communication throughout\"\n    ]\n  },\n  \"cases_analyzed\": [\n    {\n      \"case_id\": \"TM-XXXXXXX\",\n      \"case_title\": \"Brief description of the case issue\",\n      \"data_source\": \"emailDB/surveyDB\"\n    }\n  ]\n}\n```",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -544,
        176
      ],
      "id": "4600b3a6-99aa-49ec-8b04-5f0ded16780e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "analyze-sct",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -880,
        176
      ],
      "id": "3ff50188-d28c-4b18-9e6d-44bd89f14736",
      "name": "Webhook",
      "webhookId": "0bf25328-aa75-4ec4-9720-fbad836f08fb"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1328,
        224
      ],
      "id": "453f8509-4cff-4c25-ad7e-5dcd99b08d8c",
      "name": "When clicking ‘Execute workflow’",
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        176,
        176
      ],
      "id": "660830d5-2163-4c13-9b76-4acf2704c275",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "JSONizer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "emailDB": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MongoDB Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "JSONizer": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "876fced4-29cd-46c3-bb44-428fcbcfe35e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "19925d8ea9608c62de932aa1564c2e7236335b0466d69111e1fed356d5342c96"
  },
  "id": "yQissI9g6XMYRinM",
  "tags": []
}